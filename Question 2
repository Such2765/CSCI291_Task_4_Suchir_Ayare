//Linking libraired
#include <stdio.h>
#include <stdlib.h>

// Constant width and height 
#define WIDTH 512
#define HEIGHT 512

int main() {
    char cover_image[] = "baboon.pgm";
    char secret_image[] = "farm.pgm";
    char stego_image[] = "stego_image_bin.pgm";
    char extracted_secret[] = "extracted_secret.pgm";

    unsigned char *coverPixels, *secretPixels, *outputPixels;

    // Read the cover image
    if (readPGMText(cover_image, &coverPixels, WIDTH, HEIGHT) != 0) {
        return -1;
    }

    // Read the secret image
    if (readPGMText(secret_image, &secretPixels, WIDTH, HEIGHT) != 0) {
        free(coverPixels);
        return -1;
    }

    // Embed the secret image into the cover image
    embedLSB(coverPixels, secretPixels, WIDTH, HEIGHT);

    // Save the stego image in binary format
    if (writePGMBinary(stego_image, coverPixels, WIDTH, HEIGHT) != 0) {
        free(coverPixels);
        free(secretPixels);
        return -1;
    }

    // Allocate memory for the extracted secret image
    outputPixels = (unsigned char *)malloc(WIDTH * HEIGHT * sizeof(unsigned char));
    if (!outputPixels) {
        fprintf(stderr, "Error: Memory allocation failed for output image.\n");
        free(coverPixels);
        free(secretPixels);
        return -1;
    }

    // Extract the secret image from the stego image
    extractLSB(coverPixels, outputPixels, WIDTH, HEIGHT);

    // Save the extracted secret image in text format
    if (writePGMText(extracted_secret, outputPixels, WIDTH, HEIGHT) != 0) {
        free(coverPixels);
        free(secretPixels);
        free(outputPixels);
        return -1;
    }

    free(coverPixels);
    free(secretPixels);
    free(outputPixels);

    printf("Stego image and extracted secret image generated successfully.\n");
    return 0;
}

//---------------------------------------------------------------------------------------------------------------------------

// Function to read a PGM image in text format.
int readPGMText(const char *filename, unsigned char **pixels, int width, int height) {
    FILE *file = fopen(filename, "r");
    if (!file) {
        fprintf(stderr, "Error: Could not open file %s\n", filename);
        return -1;
    }

    char format[3];
    fscanf(file, "%s", format);
    // Error handling: if image is not in PGM format
    if (strcmp(format, "P2") != 0) {
        fprintf(stderr, "Error: Invalid PGM format in %s\n", filename);
        fclose(file);
        return -2;
    }

    // Skip comment and header
    char buffer[256];
    while (fgetc(file) == '#') {
        fgets(buffer, sizeof(buffer), file);
    }
    fseek(file, -1, SEEK_CUR); // Undo one character read.

    int maxVal;
    fscanf(file, "%*d %*d %d", &maxVal);
    if (maxVal != 255) {
        // Error handling: if image format value is not supported
        fprintf(stderr, "Error: Unsupported max gray value in %s\n", filename);
        fclose(file);
        return -3;
    }

    *pixels = (unsigned char *)malloc(width * height * sizeof(unsigned char));
    if (!*pixels) {
        // Error handling: if unable to retrieve file
        fprintf(stderr, "Error: Memory allocation failed for %s\n", filename);
        fclose(file);
        return -4;
    }

    for (int i = 0; i < width * height; i++) {
        int pixel;
        fscanf(file, "%d", &pixel);
        (*pixels)[i] = (unsigned char)pixel;
    }

    fclose(file);
    return 0;
}

// Function to write a PGM image in text format.
int writePGMText(const char *filename, unsigned char *pixels, int width, int height) {
    FILE *file = fopen(filename, "w");
    if (!file) {
        // Error handling: unable to open file
        fprintf(stderr, "Error: Could not open file %s\n", filename);
        return -1;
    }

    fprintf(file, "P2\n");
    fprintf(file, "# Generated by LSB Steganography\n");
    fprintf(file, "%d %d\n", width, height);
    fprintf(file, "255\n");

    for (int i = 0; i < width * height; i++) {
        fprintf(file, "%d ", pixels[i]);
        if ((i + 1) % 16 == 0)
            fprintf(file, "\n");
    }

    fclose(file);
    return 0;
}

// Function to write a PGM image in binary format.
int writePGMBinary(const char *filename, unsigned char *pixels, int width, int height) {
    FILE *file = fopen(filename, "wb");
    if (!file) {
        // Error handling: unable to open file
        fprintf(stderr, "Error: Could not open file %s\n", filename);
        return -1;
    }

    fprintf(file, "P5\n");
    fprintf(file, "# Generated by LSB Steganography\n");
    fprintf(file, "%d %d\n", width, height);
    fprintf(file, "255\n");

    fwrite(pixels, sizeof(unsigned char), width * height, file);

    fclose(file);
    return 0;
}

// Function to hide a secret image using the 4-bit LSB steganography algorithm.
void embedLSB(unsigned char *coverPixels, unsigned char *secretPixels, int width, int height) {
    for (int i = 0; i < width * height; i++) {
        coverPixels[i] = (coverPixels[i] & 0xF0) | (secretPixels[i] >> 4);
    }
}

// Function to extract the secret image using the 4-bit LSB steganography algorithm.
void extractLSB(unsigned char *stegoPixels, unsigned char *outputPixels, int width, int height) {
    for (int i = 0; i < width * height; i++) {
        outputPixels[i] = (stegoPixels[i] & 0x0F) << 4;
    }
}

